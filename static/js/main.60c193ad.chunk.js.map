{"version":3,"sources":["serviceWorker.js","Todo.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Todo","props","className","fontSize","onClick","onsel","id","text","App","useState","Items","Set","Itemarr","Setarr","delItem","Old","filter","arrI","inde","type","placeholder","value","onChange","event","target","IconButton","aria-label","map","Ival","ind","key","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8DCJWC,EATJ,SAACC,GACd,OACI,oCACA,yBAAKC,UAAU,QACZ,gCAAK,8BAAM,kBAAC,IAAD,CAAYC,SAAS,UAAUD,UAAU,MAAME,QAAS,WAAOH,EAAMI,MAAMJ,EAAMK,OAAvF,KAAL,IAA+GL,EAAMM,KAArH,QCyCQC,EA3CH,WAAO,IAAD,EACEC,mBAAS,IADX,mBACXC,EADW,KACLC,EADK,OAEOF,mBAAS,IAFhB,mBAEXG,EAFW,KAEHC,EAFG,KAYZC,EAAU,SAACR,GACfO,GAAO,SAACE,GACN,OAAOA,EAAIC,QAAO,SAACC,EAAKC,GAC5B,OAAOA,IAAOZ,SAIZ,OACE,oCACA,yBAAKJ,UAAU,QACb,yBAAKA,UAAU,UACb,0CACA,6BACA,2BAAOiB,KAAK,OAAOC,YAAY,oBAAoBC,MAAOX,EAAOY,SAtB3D,SAACC,GACbZ,EAAIY,EAAMC,OAAOH,UAsBL,kBAACI,EAAA,EAAD,CAAYC,aAAW,SAAStB,QApBjC,WACXS,GAAO,SAACE,GACV,MAAM,GAAN,mBAAWA,GAAX,CAAeL,OAEbC,EAAI,MAiBI,kBAAC,IAAD,CAASR,SAAS,WAGpB,4BAEES,EAAQe,KAAI,SAACC,EAAKC,GAChB,OAAO,kBAAC,EAAD,CAAMtB,KAAMqB,EAAME,IAAKD,EAAKvB,GAAIuB,EAAKxB,MAAOS,YCnC/DiB,IAASC,OACL,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAIJC,SAASC,eAAe,SHwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.60c193ad.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport DeleteIcon from '../node_modules/@material-ui/icons/Delete';\r\nimport './index.css';\r\n\r\n\r\nconst Todo = (props) => {\r\nreturn(\r\n    <>\r\n    <div className=\"todo\">\r\n       <li> <span><DeleteIcon fontSize=\"inherit\" className=\"del\" onClick={() => {props.onsel(props.id);}} /> </span> {props.text} </li>\r\n    </div>\r\n    </>\r\n);\r\n  };\r\n  export default Todo;","import React,{useState} from 'react';\nimport AddIcon from '../node_modules/@material-ui/icons/Add';\nimport IconButton from '../node_modules/@material-ui/core/IconButton';\nimport './index.css';\nimport Todo from './Todo';\n\n\nconst App = () => {\nconst [Items,Set] = useState(\"\");\nconst [Itemarr,Setarr] = useState([]);\nconst Lists = (event) => {\n  Set(event.target.value);\n};\nconst Adds = () => {\n  Setarr((Old) => {\nreturn [...Old,Items];\n  });\n  Set(\"\");\n};\nconst delItem = (id) => {\n  Setarr((Old) => {\n    return Old.filter((arrI,inde) => {\nreturn inde!==id;\n    });\n      });\n};\n  return(  \n    <>\n    <div className=\"main\">\n      <div className=\"center\">\n        <h1> ToDo List</h1>\n        <br />\n        <input type=\"text\" placeholder=\"Add items to list\" value={Items} onChange={Lists}/>\n              <IconButton aria-label=\"delete\" onClick={Adds}>\n          <AddIcon fontSize=\"large\" />\n        </IconButton>\n        \n        <ol>\n        {\n          Itemarr.map((Ival,ind) => {\n            return <Todo text={Ival} key={ind} id={ind} onsel={delItem} />;\n          })\n        }\n        </ol>\n      </div>\n    </div>\n    </>\n       ); \n  }\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}